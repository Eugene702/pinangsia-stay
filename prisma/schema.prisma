// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  MANAGER
  RECIPIENT
  CUSTOMER
}

model User{
  id String @id @default(cuid())
  photo String?
  name String
  email String @unique
  password String
  telp String?
  address String?
  role Role
  createdAt DateTime @db.Timestamp(3)
  deletedAt DateTime? @db.Timestamp(3)

  booking Booking[]
}

model RoomCategory{
  id String @id @default(cuid())
  photo String
  name String
  price BigInt
  createdAt DateTime @db.Timestamp(3)
  deletedAt DateTime? @db.Timestamp(3)

  room Room[]
  booking Booking[]
}

model Room{
  no String @id
  roomCategoryId String
  floor Int
  createdAt DateTime @db.Timestamp(3)
  deletedAt DateTime? @db.Timestamp(3)

  roomCategory RoomCategory @relation(fields: [roomCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomAllocationMany RoomAllocation[]
  roomAvailability RoomAvailability?
}

model Booking{
  id String @id @default(cuid())
  userId String
  roomCategoryId String
  bookingTime DateTime @db.Timestamp(3)
  paidOff DateTime?
  createdAt DateTime @db.Timestamp(3)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomCategory RoomCategory @relation(fields: [roomCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomAllocation RoomAllocation?
  transaction Transaction?
}

model Transaction{
  id String @id
  transactionId String
  transactionMethodId String
  
  booking Booking @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RoomAllocation{
  id String @id @default(cuid())
  bookingId String @unique
  roomId String
  checkIn DateTime @db.Timestamp(3)
  checkOut DateTime @db.Timestamp(3)

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  room Room @relation(fields: [roomId], references: [no], onDelete: Cascade, onUpdate: Cascade)
  roomAvailability RoomAvailability?
}

model RoomAvailability{
  roomId String @unique
  roomAllocationId String @unique

  room Room @relation(fields: [roomId], references: [no], onDelete: Cascade, onUpdate: Cascade)
  roomAllocation RoomAllocation @relation(fields: [roomAllocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}